generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  username            String         @unique @db.VarChar(50)
  email               String         @unique @db.VarChar(100)

  // Authentication fields (make passwordHash optional for OAuth users)
  passwordHash        String?        @map("password_hash") @db.VarChar(255)
  authProvider        AuthProvider   @default(local) @map("auth_provider")
  googleId            String?        @unique @map("google_id") @db.VarChar(255)

  // Profile fields from OAuth
  profilePicture      String?        @map("profile_picture") @db.VarChar(500)
  emailVerified       Boolean        @default(false) @map("email_verified")

  // Timestamps
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")

  // Existing relations
  decks               Deck[]
  gameActions         GameAction[]   @relation("GameActionPlayer")
  gameStatesAsCurrent GameState[]    @relation("GameStateCurrentPlayer")
  gameStatesAsPlayer1 GameState[]    @relation("GameStatePlayer1")
  gameStatesAsPlayer2 GameState[]    @relation("GameStatePlayer2")
  gamesAsPlayer1      Game[]         @relation("Player1")
  gamesAsPlayer2      Game[]         @relation("Player2")
  gamesWon            Game[]         @relation("Winner")
  userStats           UserStats?

  // OAuth relations
  refreshTokens       RefreshToken[]
  oauthSessions       OAuthSession[]

  @@map("users")
}

model ActiveCard {
  id          String     @id @default(cuid())
  name        String     @db.VarChar(100)
  faction     Faction
  type        CardType
  cost        Int        @db.SmallInt
  attack      Int?       @db.SmallInt
  hp          Int?       @db.SmallInt
  range       Int?       @db.SmallInt
  abilities   Json       @default("[]")
  description String?
  flavorText  String?    @map("flavor_text")
  imageUrl    String?    @map("image_url") @db.VarChar(255)
  setId       String     @map("set_id") @db.VarChar(20)
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  deckCards   DeckCard[]

  @@index([faction])
  @@index([type])
  @@index([cost])
  @@index([setId])
  @@index([isActive])
  @@map("active_cards")
}

model FactionData {
  id             String @id
  name           String @db.VarChar(50)
  description    String
  formation      Json
  passiveAbility Json
  colorTheme     String @db.VarChar(7)

  @@map("factions")
}

model CardAbility {
  id          String @id @db.VarChar(50)
  name        String @db.VarChar(100)
  description String
  effectType  String @map("effect_type") @db.VarChar(30)
  parameters  Json   @default("{}")

  @@map("card_abilities")
}

model Deck {
  id                 Int        @id @default(autoincrement())
  userId             Int        @map("user_id")
  name               String     @db.VarChar(50)
  faction            Faction
  isValid            Boolean    @default(false) @map("is_valid")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  deckCards          DeckCard[]
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  gamesAsPlayer1Deck Game[]     @relation("Player1Deck")
  gamesAsPlayer2Deck Game[]     @relation("Player2Deck")

  @@index([userId])
  @@index([faction])
  @@map("decks")
}

model DeckCard {
  deckId   Int        @map("deck_id")
  cardId   String     @map("card_id")
  quantity Int        @db.SmallInt
  card     ActiveCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  deck     Deck       @relation(fields: [deckId], references: [id], onDelete: Cascade)

  @@id([deckId, cardId])
  @@map("deck_cards")
}

model Game {
  id              Int          @id @default(autoincrement())
  player1Id       Int          @map("player1_id")
  player2Id       Int          @map("player2_id")
  player1DeckId   Int          @map("player1_deck_id")
  player2DeckId   Int          @map("player2_deck_id")
  winnerId        Int?         @map("winner_id")
  durationSeconds Int?         @map("duration_seconds")
  endReason       String?      @map("end_reason") @db.VarChar(50)
  createdAt       DateTime     @default(now()) @map("created_at")
  endedAt         DateTime?    @map("ended_at")
  gameActions     GameAction[]
  gameStates      GameState[]
  player1Deck     Deck         @relation("Player1Deck", fields: [player1DeckId], references: [id])
  player1         User         @relation("Player1", fields: [player1Id], references: [id])
  player2Deck     Deck         @relation("Player2Deck", fields: [player2DeckId], references: [id])
  player2         User         @relation("Player2", fields: [player2Id], references: [id])
  winner          User?        @relation("Winner", fields: [winnerId], references: [id])

  @@index([player1Id, player2Id])
  @@map("games")
}

model GameState {
  id              Int          @id @default(autoincrement())
  gameId          Int          @map("game_id")
  player1Id       Int          @map("player1_id")
  player2Id       Int          @map("player2_id")
  currentPlayerId Int          @map("current_player")
  turn            Int          @default(1)
  phase           GamePhase    @default(resources)
  boardStateJson  Json         @map("board_state_json")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  gameActions     GameAction[]
  currentPlayer   User         @relation("GameStateCurrentPlayer", fields: [currentPlayerId], references: [id])
  game            Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player1         User         @relation("GameStatePlayer1", fields: [player1Id], references: [id])
  player2         User         @relation("GameStatePlayer2", fields: [player2Id], references: [id])

  @@index([gameId])
  @@index([gameId, turn])
  @@map("game_states")
}

model GameAction {
  id               String    @id @default(cuid())
  gameId           Int       @map("game_id")
  gameStateId      Int       @map("game_state_id")
  playerId         Int       @map("player_id")
  actionType       String    @map("action_type") @db.VarChar(30)
  actionData       Json      @map("action_data")
  gameStateBefore  Json?     @map("game_state_before")
  gameStateAfter   Json?     @map("game_state_after")
  turn             Int       @default(1)
  phase            GamePhase @default(actions)
  resourceCost     Int       @default(0) @map("resource_cost")
  isValid          Boolean   @default(true) @map("is_valid")
  validationErrors Json?     @map("validation_errors")
  timestamp        DateTime  @default(now())
  game             Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameState        GameState @relation(fields: [gameStateId], references: [id], onDelete: Cascade)
  player           User      @relation("GameActionPlayer", fields: [playerId], references: [id])

  @@index([gameId, turn])
  @@index([playerId])
  @@index([actionType])
  @@index([timestamp])
  @@map("game_actions")
}

model UserStats {
  userId      Int      @id @map("user_id")
  totalGames  Int      @default(0) @map("total_games")
  totalWins   Int      @default(0) @map("total_wins")
  humansGames Int      @default(0) @map("humans_games")
  humansWins  Int      @default(0) @map("humans_wins")
  aliensGames Int      @default(0) @map("aliens_games")
  aliensWins  Int      @default(0) @map("aliens_wins")
  robotsGames Int      @default(0) @map("robots_games")
  robotsWins  Int      @default(0) @map("robots_wins")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

// New model for refresh token management
model RefreshToken {
  id           String    @id @default(cuid())
  userId       Int       @map("user_id")
  token        String    @unique @db.VarChar(500)
  expiresAt    DateTime  @map("expires_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  revokedAt    DateTime? @map("revoked_at")
  replacedBy   String?   @map("replaced_by") @db.VarChar(500)

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// OAuth session tracking for security audit
model OAuthSession {
  id              String      @id @default(cuid())
  userId          Int         @map("user_id")
  provider        AuthProvider
  accessToken     String?     @map("access_token") @db.Text
  refreshToken    String?     @map("refresh_token") @db.Text
  tokenExpiresAt  DateTime?   @map("token_expires_at")
  ipAddress       String?     @map("ip_address") @db.VarChar(45)
  userAgent       String?     @map("user_agent") @db.VarChar(500)
  createdAt       DateTime    @default(now()) @map("created_at")
  lastUsedAt      DateTime    @updatedAt @map("last_used_at")
  revokedAt       DateTime?   @map("revoked_at")

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([provider])
  @@map("oauth_sessions")
}

enum Faction {
  humans
  aliens
  robots
}

enum CardType {
  unit
  spell
}

enum GamePhase {
  resources
  draw
  actions
}

// New enum for authentication providers
enum AuthProvider {
  local
  google
}
